pipeline {
    agent any

    environment {
        REPO_NAME     = 'demo-docker'
        REGISTRY_USER = 'gowshikm'
        DOCKER_TAG    = "${BUILD_ID}"
        IMAGE_NAME    = "${REGISTRY_USER}/${REPO_NAME}"
        DOCKERFILE_DIR = "Calculator App"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main',
                    url: "https://github.com/GowshikM-2005/Demo-Docker.git"
            }
        }

        stage('Debug: Check Workspace') {
            steps {
                script {
                    echo "Workspace directory: ${WORKSPACE}"
                    sh "ls -la ${WORKSPACE}"
                    sh "ls -la '${WORKSPACE}/Calculator App' || echo 'Calculator App directory not found'"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                     dir(env.DOCKERFILE_DIR) {
                        docker.build("${env.IMAGE_NAME}:${env.DOCKER_TAG}")
                    }
                }
            }
        }

        // stage('Test Docker Image') {
        //     steps {
        //         script {
        //             docker.image("${env.IMAGE_NAME}:${env.DOCKER_TAG}").inside("--rm") {
        //                 sh 'echo "Container is running successfully!"'
        //             }
        //         }
        //     }
        // }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'secreat',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                            docker push ${env.IMAGE_NAME}:${env.DOCKER_TAG}
                            docker push ${env.IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Docker build pipeline finished.'
        }
        success {
            script {
                def imageName = "${env.REGISTRY_USER}/${env.REPO_NAME}"
                echo "âœ… Image pushed successfully: ${imageName}:latest"
            }
        }
        failure {
            echo 'Pipeline failed! Check the logs.'
        }
    }
}
