pipeline {
    agent any
    // Define environment variables for easy configuration
    environment {
        REPO_NAME = 'your-repo-name'
        REGISTRY_USER = 'your-dockerhub-username'
        IMAGE_NAME = "${REGISTRY_USER}/${REPO_NAME}"
        DOCKER_CREDS = credentials('gowshikm')
    }
    // FIX: Define the variable globally at the top of the pipeline
    def dockerImage

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main', 
                url: "https://github.com/your-username/${REPO_NAME}.git"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Assign the built image to the global variable
                    dockerImage = docker.build("${IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    dockerImage.inside("--rm") {
                        sh 'echo "Container is running successfully!"'
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', "${env.DOCKER_CREDS}") {
                        dockerImage.push("${env.BUILD_ID}")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Docker build pipeline finished.'
            // FIX: Check if the variable exists before trying to use it
            script {
                // This checks if the 'Build Docker Image' stage ran successfully
                if (dockerImage != null) {
                    dockerImage.clean()
                }
            }
        }
        success {
            echo "Image pushed successfully: ${IMAGE_NAME}:latest"
        }
        failure {
            echo 'Pipeline failed! Check the logs.'
        }
    }
}
