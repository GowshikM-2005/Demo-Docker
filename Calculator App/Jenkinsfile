pipeline {
    agent any

    environment {
        REPO_NAME     = 'Demo-Docker'
        REGISTRY_USER = 'gowshikm'
        DOCKER_CREDS  = credentials('gowshikm')
        DOCKER_TAG    = "${BUILD_ID}"
        IMAGE_NAME    = "${REGISTRY_USER}/${REPO_NAME}" 
    }

    stages {
    stage('Checkout SCM') {
            steps {
                git branch: 'main',
                    url: "https://github.com/GowshikM-2005/Demo-Docker.git"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${env.IMAGE_NAME}:${env.DOCKER_TAG}")
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    docker.image("${env.IMAGE_NAME}:${env.DOCKER_TAG}").inside("--rm") {
                        sh 'echo "Container is running successfully!"'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', env.DOCKER_CREDS) {
                        docker.image("${env.IMAGE_NAME}:${env.DOCKER_TAG}").push()
                        docker.image("${env.IMAGE_NAME}:${env.DOCKER_TAG}").push('latest')
                    }
                }
            }
        }
    }

    post {
         always {
             echo 'Docker build pipeline finished.'
        //     script {
        //         try {
        //             node{
        //             sh "docker rmi ${env.IMAGE_NAME}:${env.DOCKER_TAG} || true"
        //             sh "docker rmi ${env.IMAGE_NAME}:latest || true"
        //             }
        //         } catch (Exception e) {
        //             echo "Cleanup failed: ${e.message}"
        //         }
        //     }
         }
        success {
            def imageName = "${env.REGISTRY_USER}/${env.REPO_NAME}"
            echo "âœ… Image pushed successfully: ${imageName}:latest"
        }
        failure {
            echo 'Pipeline failed! Check the logs.'
        }
    }
}
